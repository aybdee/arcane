// ==============================================================================
// PROGRAM STRUCTURE
// ==============================================================================

// Entry point of the grammar
start : program
program : (statement | COMMENT)* 

// Main statement types
statement : definition | animate_declaration | clear_declaration |axis_declaration | polar_declaration  NEWLINE

// Variable and function definitions
definition : "Define" IDENT "as" (expression | line_declaration | lens_declaration | arrow_declaration | point_declaration | angle_declaration | square_declaration | rectangle_declaration | regular_polygon_declaration | polygon_declaration | circle_declaration | ray_declaration)

// ==============================================================================
// MATHEMATICAL EXPRESSIONS AND FUNCTIONS
// ==============================================================================

// Top-level expression types
expression : math_function | algebraic_expression | parametric_expression

// Function definitions
math_function: regular_math_function | parametric_math_function | polar_math_function
regular_math_function: "f" "("(IDENT) ("," IDENT)*")" "=" algebraic_expression
polar_math_function: "polar" "(" (IDENT) ")" "=" algebraic_expression
parametric_math_function: "parametric" "("(IDENT) ("," IDENT)*")" "=" "(" algebraic_expression ("," algebraic_expression)* ")"

// Trigonometric functions
trigonometric_function: (SIN | COS | TAN) "(" algebraic_expression ")"

// Algebraic expression hierarchy (supports variables and complex expressions)
algebraic_expression : algebraic_term ((ADD | SUB) algebraic_term)*
algebraic_term      : algebraic_factor ((MUL | DIV | MOD) algebraic_factor)*
algebraic_factor     : algebraic_base (EXP algebraic_base)*
algebraic_base : [SUB] (NUMBER | IDENT | NUMBER IDENT | "(" algebraic_expression ")" | trigonometric_function | constant)

// Numerical expression hierarchy (numbers and constants only)
numerical_expression : numerical_term ((ADD | SUB) numerical_term)*
numerical_term      : numerical_factor ((MUL | DIV | MOD) numerical_factor)*
numerical_factor     : numerical_base (EXP numerical_base)*
numerical_base : NUMBER | "(" numerical_expression ")" | constant

// Parametric expressions
parametric_expression: "(" algebraic_expression ("," algebraic_expression)* ")"

// Mathematical constants
constant: [SUB] (PI | E)

// ==============================================================================
// GEOMETRIC SHAPE DECLARATIONS
// ==============================================================================

// Point declarations
point_declaration: "point" position ["and" style_block]

// Line declarations
line_declaration: "line" (sweep_coordinates | coordinate_angle_length | ident_sweep) ["and" style_block]
arrow_declaration: "arrow" (sweep_coordinates | ident_sweep) ["and" style_block]
sweep_coordinates: "from" "("numerical_expression","numerical_expression")" "to" "("numerical_expression","numerical_expression")"
coordinate_angle_length:  "from" "("numerical_expression","numerical_expression")" "with angle" numerical_expression ["and"] "length" numerical_expression
ident_sweep: "from" IDENT "to" IDENT

// Angle declarations
angle_declaration: "angle"  (three_point_angle | coordinate_angle_length)
three_point_angle: position "from" "("numerical_expression","numerical_expression")" "to" "("numerical_expression","numerical_expression")"

// Rectangle and square declarations
square_declaration: "square" position_length ["and" style_block]
rectangle_declaration: "rectangle with width" numerical_expression ["and"] "height" numerical_expression position ["and" style_block]

// Polygon declarations
regular_polygon_declaration: "regular polygon with radius" numerical_expression ["and"] "sides" numerical_expression position ["and" style_block]
polygon_declaration: "polygon with points" point_list ["and" style_block]
point_list: "("numerical_expression","numerical_expression")" ("," "("numerical_expression","numerical_expression")")*

// Circle declarations
circle_declaration: "circle with radius" numerical_expression position ["and" style_block]

// Style declarations
style_block: "style" "{" style_property (NEWLINE style_property)* "}"
style_property: STYLE_PROPERTY_KEY ":" STRING


// ==============================================================================
// HIGHER LEVEL CONSTRUCTS
// ==============================================================================
lens_declaration: "lens" "with focal length" numerical_expression ["and"] "thickness" numerical_expression position ["and" style_block]
ray_declaration: "rays" sweep_coordinates "with" "direction" DIRECTION ["and"] "count" numerical_expression ["and" style_block]



// ==============================================================================
// ANIMATION AND DISPLAY FEATURES
// ==============================================================================

// Animation declarations
animate_declaration: "@" animatable
animatable: (((IDENT | ((IDENT | math_function | show_declaration) math_transform) ) ["and" sweep_dot]) | write_declaration | arrow_declaration |line_declaration | point_declaration | angle_declaration | square_declaration | rectangle_declaration | regular_polygon_declaration | polygon_declaration | transform_declaration | circle_declaration | lens_declaration | propagate_rays | move_declaration | move_along_declaration | scale_declaration | rotate_declaration )
clear_declaration: "clear" IDENT
propagate_rays: "propagate" IDENT "through" IDENT [("then" IDENT)*]

// Animation modifiers and effects
sweep_dot: "sweep dot across"
sweep: "from" numerical_expression "to" numerical_expression
math_transform: [sweep]

// Text and display features
show_declaration: "show" vertical_line_declaration
vertical_line_declaration: numerical_expression "vertical lines on" IDENT
write_declaration: "write" write_value position ["with" font_option ("," font_option)*]

// Text content and formatting
write_value: STRING | latex
latex: "latex" STRING
font_option: FONT_OPTION_KEY font_option_value

// ==============================================================================
// COORDINATE SYSTEMS
// ==============================================================================

// Axis and polar coordinate system declarations
axis_declaration: "on" "axis" IDENT "{" (animate_declaration NEWLINE)* "}"
polar_declaration: "on" "polar" IDENT "{" (animate_declaration NEWLINE)* "}"

// ==============================================================================
// TRANSFORMATIONS AND UTILITIES
// ==============================================================================

// Geometric transformations
transform_declaration: "transform" (expression | animatable) "to" (expression | animatable)
move_declaration: "move" IDENT ["to"] position
scale_declaration: "scale" IDENT "by" numerical_expression
rotate_declaration: "rotate" IDENT "by" numerical_expression
move_along_declaration: "move" IDENT "along" IDENT

// Position and length utilities
position_length: "with length" numerical_expression position
position: relative_angle_position | absolute_coordinate_position | relative_direction_position
relative_angle_position: "on" IDENT "at angle" numerical_expression
absolute_coordinate_position: ["at"] "("numerical_expression","numerical_expression")"
relative_direction_position: RELATIVE_POSITION_DIRECTION IDENT
DIRECTION: "RIGHT" | "LEFT" | "UP" | "DOWN"
assign: IDENT "="  numerical_expression

// ==============================================================================
// TERMINALS AND TOKENS
// ==============================================================================

// Mathematical operators
MUL: "*"
DIV: "/"
ADD: "+"
EXP: "^"
SUB: "-"
MOD: "mod"i

// Trigonometric functions
SIN: "sin"i
COS: "cos"i
TAN: "tan"i

// Mathematical constants
PI: "PI"i
E: "e"

// Positional keywords
RELATIVE_POSITION_DIRECTION: "above" | "below" | "left of" | "right of"

// Font options
FONT_OPTION_KEY: "size" 
font_option_value: NUMBER 

// Style properties
STYLE_PROPERTY_KEY: "fill" | "stroke_color"

// ==============================================================================
// IMPORTED TERMINALS
// ==============================================================================

// Import common tokens from Lark's common library
%import common.ESCAPED_STRING   -> STRING
%import common.CNAME   -> IDENT
%import common.SIGNED_NUMBER    -> NUMBER
%import common.WS
%import common.NEWLINE

// ==============================================================================
// IGNORE PATTERNS
// ==============================================================================

COMMENT: "#" /[^\n]/*

// Ignore whitespace and newlines in most contexts
%ignore WS
%ignore NEWLINE
%ignore COMMENT
